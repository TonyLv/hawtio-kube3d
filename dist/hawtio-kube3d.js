(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.


var Kube3d;
(function (Kube3d) {
    Kube3d.W = 1;
    Kube3d.S = 0;
    Kube3d.WALL = Kube3d.W;
    Kube3d.SPACE = Kube3d.S;
    Kube3d.CELL_SIZE = 100;
    Kube3d.FLOOR_LEVEL = -Kube3d.CELL_SIZE;
    ;
})(Kube3d || (Kube3d = {}));

var Kube3d;
(function (Kube3d) {
    Kube3d._module = angular.module(Kube3d.pluginName, []);
    Kube3d.controller = PluginHelpers.createControllerFunction(Kube3d._module, Kube3d.pluginName);
    Kube3d.route = PluginHelpers.createRoutingFunction(Kube3d.templatePath);
    var tab = undefined;
    Kube3d._module.config(['$routeProvider', "HawtioNavBuilderProvider", function ($routeProvider, builder) {
            tab = builder.create()
                .id(Kube3d.pluginName)
                .title(function () { return 'Angry Pods'; })
                .href(function () { return '/kubernetes/3d'; })
                .page(function () { return builder.join(Kube3d.templatePath, 'view.html'); })
                .build();
            builder.configureRouting($routeProvider, tab);
            ['/kubernetes', "/workspaces/:workspace/projects/:project"].forEach(function (context) {
                $routeProvider.when(UrlHelpers.join(context, '/namespace/:namespace/angryPods'), Kube3d.route('view.html', false));
            });
        }]);
    Kube3d._module.run(['HawtioNav', 'preferencesRegistry', function (nav, prefs) {
            nav.on(HawtioMainNav.Actions.ADD, Kube3d.pluginName, function (item) {
                if (item.id !== 'kubernetes') {
                    return;
                }
                if (!_.any(item.tabs, function (tab) { return tab.id === Kube3d.pluginName; })) {
                    item.tabs.push(tab);
                }
            });
            prefs.addTab('Angry Pods', UrlHelpers.join(Kube3d.templatePath, 'preferences.html'));
        }]);
    Kube3d._module.directive('angryPodsTitle', function () {
        return {
            restrict: 'C',
            link: function (scope, element, attr) {
                element.css({
                    'background-image': "url('resources/angry-pods-title.png')",
                    'background-repeat': 'no-repeat',
                    'background-size': '100%'
                });
            }
        };
    });
    hawtioPluginLoader.addModule(Kube3d.pluginName);
})(Kube3d || (Kube3d = {}));

var Kube3d;
(function (Kube3d) {
    var dummy = {
        play: function () { }
    };
    Kube3d.playerLaser = undefined;
    Kube3d.podlekLaser = undefined;
    Kube3d.laserHit = undefined;
    Kube3d.podlekExplosion = undefined;
    Kube3d.playerExplosion = undefined;
    Kube3d.playerSpawn = undefined;
    Kube3d.tracks = [];
    Kube3d._module.run(function () {
        Kube3d.playerLaser = new Howl({
            urls: ['resources/sounds/player_laser.ogg'],
            loop: false
        });
        Kube3d.podlekLaser = new Howl({
            urls: ['resources/sounds/podlek_laser.ogg'],
            loop: false
        });
        Kube3d.laserHit = new Howl({
            urls: ['resources/sounds/hit.ogg'],
            loop: false
        });
        Kube3d.podlekExplosion = new Howl({
            urls: ['resources/sounds/explosion.ogg'],
            loop: false
        });
        Kube3d.playerExplosion = new Howl({
            urls: ['resources/sounds/player_explosion.ogg'],
            loop: false
        });
        Kube3d.playerSpawn = new Howl({
            urls: ['resources/sounds/player_spawn.ogg'],
            volume: 0.9,
            loop: false
        });
        _.forEach(['background1.ogg', 'background2.ogg', 'background3.ogg'], function (track) {
            Kube3d.tracks.push(new Howl({
                urls: [UrlHelpers.join('resources/bg_music', track)],
                volume: 0.6,
                loop: false
            }));
        });
    });
})(Kube3d || (Kube3d = {}));

var Kube3d;
(function (Kube3d) {
    var deathFrames = 0.5 * 60;
    var maxHealth = 1;
    function randomColor() {
        return "#FF0000".replace(/0/g, function () { return (~~(Math.random() * 6 + 2)).toString(16); });
    }
    var EnergyBolt = (function () {
        function EnergyBolt(game, origin, direction, owner) {
            this.game = game;
            this.origin = origin;
            this.direction = direction;
            this.owner = owner;
            this.name = undefined;
            this._entity = undefined;
            this.lastPosition = undefined;
            this.dead = false;
            this.dying = false;
            this.log = undefined;
            this.health = maxHealth;
            this.deathFrameCount = 0;
            this.bullet = undefined;
            this.cloud = undefined;
            this.position = undefined;
            var mesh = this.createMesh();
            mesh.position.set(origin.position.x, origin.position.y + 0.5, origin.position.z);
            var velocity = new game.THREE.Vector3(direction[0], direction[1], direction[2]);
            velocity.multiplyScalar(0.05);
            var item = {
                mesh: mesh,
                size: 0.8,
                velocity: velocity
            };
            this.entity = game.addItem(item);
            this.name = 'projectile-' + Date.now();
            this.log = Logger.get(this.getName());
            this.position = this.entity.yaw.position;
        }
        Object.defineProperty(EnergyBolt.prototype, "entity", {
            get: function () {
                return this._entity;
            },
            set: function (e) {
                this._entity = e;
            },
            enumerable: true,
            configurable: true
        });
        EnergyBolt.prototype.die = function (playerHit) {
            if (playerHit === void 0) { playerHit = false; }
            if (this.dying) {
                return;
            }
            this.dying = true;
            if (this.bullet) {
                this.bullet.visible = false;
            }
            if (this.cloud) {
                this.cloud.visible = true;
            }
            Kube3d.playSound(Kube3d.laserHit, this.origin, this);
        };
        EnergyBolt.prototype.hit = function () {
            this.health = this.health - 1;
            this.log.debug("I got hit!, health: ", this.health);
        };
        EnergyBolt.prototype.needsSpawning = function () {
            return false;
        };
        EnergyBolt.prototype.shouldDie = function () {
            return this.isDestroyed();
        };
        EnergyBolt.prototype.getName = function () {
            return this.name;
        };
        EnergyBolt.prototype.destroy = function () {
            this.game.removeItem(this.entity);
            this.dead = true;
        };
        EnergyBolt.prototype.isDestroyed = function () {
            return this.dead;
        };
        EnergyBolt.prototype.checkCollisions = function (entities) {
            var _this = this;
            if (this.dead || this.dying) {
                return;
            }
            var bulletAABB = this.entity.aabb();
            var hit = false;
            _.forIn(entities, function (creature, key) {
                if (hit) {
                    return;
                }
                if (key === _this.getName() || key === _this.owner) {
                    return;
                }
                if (creature.needsSpawning()) {
                    return;
                }
                if (bulletAABB.intersects(creature.entity.aabb())) {
                    _this.log.debug("I hit ", creature.getName());
                    hit = true;
                    _this.hit();
                    creature.hit();
                }
            });
        };
        EnergyBolt.prototype.tick = function (delta) {
            if (this.dead) {
                return;
            }
            if (this.health <= 0) {
                this.die();
            }
            if (this.dying) {
                this.entity.velocity.x = 0;
                this.entity.velocity.y = 0;
                this.entity.velocity.z = 0;
                this.cloud.scale.x = this.cloud.scale.x + 0.5;
                this.cloud.scale.y = this.cloud.scale.y + 0.5;
                this.cloud.scale.z = this.cloud.scale.z + 0.5;
                this.deathFrameCount = this.deathFrameCount + 1;
                if (this.deathFrameCount > deathFrames) {
                    this.destroy();
                }
                return;
            }
            if (this.lastPosition) {
                var pos = this.entity.mesh.position;
                var last = this.lastPosition;
                if (pos.x.toFixed(2) === last.x && pos.y.toFixed(2) === last.y && pos.z.toFixed(2) === last.z) {
                    this.die();
                }
            }
            this.lastPosition = {
                x: this.entity.mesh.position.x.toFixed(2),
                y: this.entity.mesh.position.y.toFixed(2),
                z: this.entity.mesh.position.z.toFixed(2)
            };
        };
        EnergyBolt.prototype.createMesh = function () {
            var game = this.game;
            var THREE = game.THREE;
            var answer = new THREE.Object3D();
            var color = randomColor();
            var bullet = new game.THREE.Mesh(new game.THREE.SphereGeometry(0.125, 8, 8), new game.THREE.MeshBasicMaterial({
                color: color
            }));
            var cloud = Kube3d.getParticles(THREE, 0.125, color, 100);
            bullet.visible = true;
            cloud.visible = false;
            this.bullet = bullet;
            this.cloud = cloud;
            answer.add(bullet);
            answer.add(cloud);
            return answer;
        };
        return EnergyBolt;
    })();
    Kube3d.EnergyBolt = EnergyBolt;
})(Kube3d || (Kube3d = {}));

var Kube3d;
(function (Kube3d) {
    Kube3d._module.directive('requestLock', ['$document', function ($document) {
            return {
                restrict: 'A',
                scope: {
                    'onLock': '&requestLock'
                },
                link: function (scope, element, attr) {
                    var el = element[0] || element;
                    if (Kube3d.havePointerLock) {
                        Kube3d.log.debug("here!");
                        var doc = $document[0];
                        var body = doc.body;
                        var pointerlockchange = function (event) {
                            if (doc.pointerLockElement === body ||
                                doc.mozPointerLockElement === body ||
                                doc.webkitPointerLockElement === body) {
                                el.style.display = 'none';
                                scope.onLock({ lock: true });
                            }
                            else {
                                el.style.display = '';
                                scope.onLock({ lock: false });
                            }
                            Core.$apply(scope);
                        };
                        var pointerlockerror = function (event) {
                            el.style.display = '';
                        };
                        doc.addEventListener('pointerlockchange', pointerlockchange, false);
                        doc.addEventListener('mozpointerlockchange', pointerlockchange, false);
                        doc.addEventListener('webkitpointerlockchange', pointerlockchange, false);
                        doc.addEventListener('pointerlockerror', pointerlockerror, false);
                        doc.addEventListener('mozpointerlockerror', pointerlockerror, false);
                        doc.addEventListener('webkitpointerlockerror', pointerlockerror, false);
                        el.addEventListener('click', function (event) {
                            el.style.display = 'none';
                            body.requestPointerLock = body.requestPointerLock || body.mozRequestPointerLock || body.webkitRequestPointerLock;
                            body.requestPointerLock();
                        });
                    }
                    else {
                        el.style.display = 'none';
                    }
                }
            };
        }]);
})(Kube3d || (Kube3d = {}));

var Kube3d;
(function (Kube3d) {
    Kube3d.deathFrames = 1 * 60;
    Kube3d.maxHealth = 1;
    var Player = (function () {
        function Player(game, avatar, target, $scope) {
            this.game = game;
            this.avatar = avatar;
            this.target = target;
            this.$scope = $scope;
            this.log = Logger.get('player');
            this.health = Kube3d.maxHealth;
            this.dead = false;
            this.targetTick = undefined;
            this.spawned = false;
            this.spawning = false;
            this.spawnClicked = false;
            Kube3d.log.debug("target: ", target);
            Kube3d.log.debug("target.tick: ", target.tick);
            Kube3d.log.debug("avatar: ", avatar);
            this.spawning = true;
            Core.$apply($scope);
        }
        Player.prototype.isDead = function () {
            return this.dead;
        };
        Player.prototype.respawn = function () {
            var _this = this;
            if (!this.spawnClicked) {
                this.spawnClicked = true;
                this.game.setTimeout(function () {
                    _this.spawnClicked = false;
                    _this.spawned = false;
                    _this.spawning = true;
                    Core.$apply(_this.$scope);
                }, 1000);
            }
        };
        Player.prototype.getName = function () {
            return 'player';
        };
        Object.defineProperty(Player.prototype, "entity", {
            get: function () {
                return this.avatar;
            },
            enumerable: true,
            configurable: true
        });
        Player.prototype.needsSpawning = function () {
            return !this.spawned;
        };
        Player.prototype.isSpawning = function () {
            return this.spawning;
        };
        Player.prototype.shouldDie = function () {
            return false;
        };
        Player.prototype.die = function () {
            this.log.debug("I died!");
            this.dead = true;
            this.game.interact.release();
            this.$scope.playerDeaths = this.$scope.playerDeaths + 1;
            Core.$apply(this.$scope);
            Kube3d.playerExplosion.play();
        };
        Player.prototype.spawn = function (self) {
            var _this = this;
            var x, y, z;
            do {
                x = Math.random() * 50 - 25;
                z = Math.random() * 50 - 25;
                y = Kube3d.getY(this.game, x, z);
                if (y === null) {
                    return;
                }
            } while (y > 7);
            this.target.position.x = x;
            this.target.position.y = y;
            this.target.position.z = z;
            this.dead = false;
            this.health = Kube3d.maxHealth;
            this.spawned = true;
            this.game.setTimeout(function () {
                _this.spawning = false;
                Core.$apply(_this.$scope);
            }, 500);
            Kube3d.playerSpawn.play();
            this.$scope.resetScore();
        };
        Player.prototype.hit = function () {
            this.health = this.health - 1;
            this.log.debug("I got hit!  Health: ", this.health);
        };
        Player.prototype.tick = function (delta) {
            if (this.dead) {
                return;
            }
            if (this.health <= 0) {
                this.die();
            }
            var target = this.target;
            walk.render(target.playerSkin);
            var vx = Math.abs(target.velocity.x);
            var vz = Math.abs(target.velocity.z);
            if (vx > 0.001 || vz > 0.001) {
                walk.stopWalking();
            }
            else {
                walk.startWalking();
            }
        };
        Player.prototype.checkCollisions = function (entities) {
        };
        Player.prototype.isDestroyed = function () {
            return false;
        };
        return Player;
    })();
    Kube3d.Player = Player;
})(Kube3d || (Kube3d = {}));

var Kube3d;
(function (Kube3d) {
    var deathFrames = 1 * 60;
    var maxHealth = 1;
    var laserCooldownTime = 1 * 60;
    var Podlek = (function () {
        function Podlek(model, game, _name, _pod, $scope) {
            this.model = model;
            this.game = game;
            this._name = _name;
            this._pod = _pod;
            this.$scope = $scope;
            this.playerHit = false;
            this.dead = false;
            this.dying = false;
            this.deleteCalled = false;
            this._entity = undefined;
            this._clearInterval = undefined;
            this.log = undefined;
            this.health = maxHealth;
            this.deathFrameCount = 0;
            this.box = undefined;
            this.cloud = undefined;
            this.position = undefined;
            this.rotation = undefined;
            this.player = undefined;
            this.desiredAngle = 0;
            this.turning = false;
            this.noticed = false;
            this.cooldown = 0;
            this.actions = [];
            this.log = Logger.get('podlek-' + _name);
        }
        Podlek.prototype.getName = function () {
            return this._name;
        };
        Podlek.prototype.createMesh = function () {
            var game = this.game;
            var THREE = game.THREE;
            var height = game.cubeSize;
            var width = game.cubeSize;
            var depth = game.cubeSize;
            var heightOffset = height / 2;
            var answer = new THREE.Object3D();
            var boxTexture = THREE.ImageUtils.loadTexture(this._pod.$iconUrl);
            boxTexture.minFilter = THREE.NearestFilter;
            var materials = [
                new THREE.MeshLambertMaterial({ color: 0xffffff }),
                new THREE.MeshLambertMaterial({ color: 0xffffff }),
                new THREE.MeshLambertMaterial({ color: 0xffffff }),
                new THREE.MeshLambertMaterial({ color: 0xffffff }),
                new THREE.MeshLambertMaterial({ map: boxTexture }),
                new THREE.MeshLambertMaterial({ color: 0xffffff })
            ];
            var boxMaterial = new THREE.MeshFaceMaterial(materials);
            var box = this.box = new THREE.Mesh(new THREE.CubeGeometry(height, width, depth), boxMaterial);
            var cloud = this.cloud = Kube3d.getParticles(THREE, game.cubeSize, 0xffffff, 1000);
            box.visible = true;
            cloud.visible = false;
            box.position.y = heightOffset;
            cloud.position.y = heightOffset;
            answer.add(box);
            answer.add(cloud);
            return answer;
        };
        Podlek.prototype.destroy = function () {
            this.dead = true;
            if (this.entity) {
                this.game.removeItem(this.entity);
            }
            if (this.clearInterval) {
                this.clearInterval();
            }
        };
        Podlek.prototype.checkCollisions = function (entities) {
        };
        Podlek.prototype.lookAt = function (obj) {
            var a = obj.position || obj;
            var b = this.position;
            this.desiredAngle = Math.atan2(a.x - b.x, a.z - b.z) + Math.random() * 1 / 4 - 1 / 8;
        };
        Podlek.prototype.notice = function (target, radius) {
            var _this = this;
            var t = target.position || target;
            return this.game.setInterval(function () {
                var dist = _this.position.distanceTo(t);
                if (dist < radius) {
                    _this.lookAt(t);
                    _this.noticed = true;
                }
                else {
                    _this.noticed = false;
                }
            }, 1000);
        };
        Podlek.prototype.jump = function (amount) {
            var _this = this;
            if (amount === void 0) { amount = 0.017; }
            if (this._entity.velocity.y !== 0) {
                return;
            }
            this.entity.velocity.y = amount;
            this.game.setTimeout(function () {
                _this.entity.velocity.z = 0.017;
            }, 100);
        };
        Podlek.prototype.forward = function (amount) {
            var _this = this;
            if (amount === void 0) { amount = 0.025; }
            if (this.entity.velocity.y !== 0) {
                return;
            }
            var angle = this.rotation.y;
            var pt = [Math.floor(this.position.x), Math.floor(this.position.y), Math.floor(this.position.z)];
            var mid = this.game.cubeSize;
            pt[0] = pt[0] + Math.round(mid * Math.sin(angle));
            pt[2] = pt[2] + Math.round(mid * Math.cos(angle));
            var block = this.game.getBlock(pt);
            if (block) {
                this.actions.length = 0;
                if (Kube3d.lessMaybe()) {
                    this.actions.push(angular.bind(this, this.jump));
                }
                else {
                    this.actions.push(angular.bind(this, function () {
                        var amount = Kube3d.maybe() ? Math.PI : -1 * Math.PI;
                        angle = angle + amount;
                        _this.desiredAngle = angle;
                    }));
                }
            }
            else {
                this.entity.velocity.z = amount;
            }
        };
        Podlek.prototype.tick = function (delta) {
            if (this.dead || !this._entity) {
                return;
            }
            if (this.health <= 0 && !this.dying) {
                this.die();
            }
            if (this.dying) {
                this.entity.velocity.x = 0;
                this.entity.velocity.y = 0;
                this.entity.velocity.z = 0;
                this.cloud.scale.x = this.cloud.scale.x + 0.2;
                this.cloud.scale.y = this.cloud.scale.y + 0.2;
                this.cloud.scale.z = this.cloud.scale.z + 0.2;
                this.deathFrameCount = this.deathFrameCount + 1;
                if (this.deathFrameCount > deathFrames) {
                    this.destroy();
                }
            }
            else {
                var angle = this.desiredAngle.toPrecision(2);
                var amount = (this.noticed ? 0.05 : 0.01);
                if (this.rotation.y < angle) {
                    this.rotation.y += amount;
                }
                else if (this.rotation.y > angle) {
                    this.rotation.y -= amount;
                }
                if (this.actions.length > 0) {
                    var action = this.actions.shift();
                    if (action) {
                        action();
                    }
                }
                if (this.noticed && this.cooldown < 0 && Kube3d.lessMaybe()) {
                    this.game.emit('fire', this);
                    this.cooldown = laserCooldownTime;
                }
                else if (this.noticed) {
                    this.cooldown--;
                }
                if (this.entity.mesh.position.y < -5) {
                    this.log.debug("I fell off the world!  dying...");
                    this.die(false);
                }
            }
        };
        Podlek.prototype.shouldDie = function () {
            return (!(this._name in this.model.podsByKey));
        };
        Podlek.prototype.isDestroyed = function () {
            return this.dead;
        };
        Podlek.prototype.isDying = function () {
            return this.dying || this.dead;
        };
        Podlek.prototype.hit = function () {
            this.playerHit = true;
            this.health = this.health - 1;
            this.log.debug("I got hit!, health: ", this.health);
        };
        Podlek.prototype.die = function (playerHit) {
            if (playerHit === void 0) { playerHit = this.playerHit; }
            if (this.dying) {
                return;
            }
            this.log.debug("I'm dying!");
            if (playerHit && !this.dying) {
                this.$scope.incrementScore();
            }
            this.dying = true;
            if (this.playerHit && !this.deleteCalled) {
                this.log.debug("Deleting resource");
                if (Kube3d.settings.destroyPods) {
                    this.model['podsResource'].delete({ id: Kubernetes.getName(this.pod) });
                }
                this.deleteCalled = true;
            }
            if (this.clearInterval) {
                this.clearInterval();
                delete this.clearInterval;
            }
            if (this.box) {
                this.box.visible = false;
            }
            if (this.cloud) {
                this.cloud.visible = true;
            }
            Kube3d.playSound(Kube3d.podlekExplosion, this.player, this);
        };
        Podlek.prototype.spawn = function (player) {
            var _this = this;
            var game = this.game;
            var playerX = player.position.x;
            var playerZ = player.position.z;
            var distX = Math.random() * 30 + 10;
            var distZ = Math.random() * 30 + 10;
            distX = Kube3d.maybe() ? distX : distX * -1;
            distZ = Kube3d.maybe() ? distZ : distZ * -1;
            var x = Math.round(playerX + distX);
            var z = Math.round(playerZ + distZ);
            var y = Kube3d.getY(game, x, z);
            if (y === null) {
                this.log.debug("Not spawning, world isn't ready yet");
                return;
            }
            this.player = player;
            var mesh = this.createMesh();
            mesh.name = this._name;
            this.log.debug("Spawning at x:", x, " y: ", y, " z:", z, " player at x:", playerX, " z:", playerZ);
            var item = {
                mesh: mesh,
                size: this.game.cubeSize,
                velocity: { x: 0, y: 0, z: 0 }
            };
            this.entity = game.addItem(item);
            this.position = this.entity.yaw.position;
            this.rotation = this.entity.yaw.rotation;
            this.position.set(x, y, z);
            var walkAround = function () {
                if (_this.dying || _this.dead || !_this.entity) {
                    return;
                }
                if (_this.actions.length === 0) {
                    var numActions = Math.random() * 20;
                    numActions = numActions + (_this.noticed ? 10 : 0);
                    for (; numActions > 0; numActions--) {
                        switch (_.random(0, 10)) {
                            case 2:
                            case 3:
                            case 8:
                            case 9:
                                _this.actions.push(angular.bind(_this, _this.turn));
                                break;
                            case 5:
                            case 6:
                                _this.actions.push(angular.bind(_this, _this.jump));
                                break;
                            default:
                                _this.actions.push(angular.bind(_this, _this.forward));
                                break;
                        }
                    }
                }
                _this.clearInterval = _this.game.setTimeout(walkAround, Math.random() * 2000);
            };
            this.notice(player, 20);
            walkAround();
        };
        Podlek.prototype.turn = function () {
            if (Kube3d.maybe()) {
                this.desiredAngle += Math.random() * Kube3d.HalfPI - Kube3d.QuarterPI;
            }
        };
        Podlek.prototype.needsSpawning = function () {
            return !angular.isDefined(this._entity);
        };
        Object.defineProperty(Podlek.prototype, "name", {
            get: function () {
                return this._name;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Podlek.prototype, "pod", {
            get: function () {
                return this._pod;
            },
            set: function (p) {
                try {
                    angular.copy(p, this._pod);
                }
                catch (e) {
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Podlek.prototype, "clearInterval", {
            get: function () {
                return this._clearInterval;
            },
            set: function (f) {
                this._clearInterval = f;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Podlek.prototype, "entity", {
            get: function () {
                return this._entity;
            },
            set: function (e) {
                this._entity = e;
            },
            enumerable: true,
            configurable: true
        });
        return Podlek;
    })();
    Kube3d.Podlek = Podlek;
})(Kube3d || (Kube3d = {}));

var Kube3d;
(function (Kube3d) {
    Kube3d.Preferences = Kube3d.controller('Preferences', ['$scope', 'localStorage', function ($scope, localStorage) {
            var config = {
                properties: {
                    'destroyPods': {
                        type: 'boolean',
                        description: 'Actually destroy pods when destroyed in-game'
                    },
                    'music': {
                        type: 'boolean',
                        description: 'Play music'
                    }
                }
            };
            $scope.$watch('entity.destroyPods', function (val, old) {
                if (val !== old) {
                    localStorage['Kube3d.destroyPods'] = val;
                }
            });
            $scope.$watch('entity.music', function (val, old) {
                if (val !== old) {
                    localStorage['Kube3d.music'] = val;
                }
            });
            $scope.entity = Kube3d.settings;
            $scope.config = config;
        }]);
})(Kube3d || (Kube3d = {}));

var Kube3d;
(function (Kube3d) {
    var maxProjectiles = 20;
    var chunkSize = 32;
    var generateChunk = Kube3d.cityTerrain();
    Kube3d.VoxelController = Kube3d.controller('VoxelController', ['$scope', '$element', 'KubernetesModel', 'localStorage', function ($scope, $element, model, localStorage) {
            $scope.subTabConfig = [];
            $scope.breadcrumbConfig = [];
            $scope.locked = true;
            $scope.playerDeaths = 0;
            $scope.score = 0;
            var highScore = Core.parseIntValue(localStorage['kube3d.highScore']);
            $scope.highScore = highScore ? highScore : 0;
            var entities = {};
            var currentTrack = undefined;
            function projectileCount() {
                return _.filter(_.keys(entities), function (key) { return _.startsWith('projectile-', key); }).length;
            }
            $scope.incrementScore = function () {
                if ($scope.player && $scope.player.isDead()) {
                    return;
                }
                $scope.score = $scope.score + 1;
                Core.$apply($scope);
            };
            $scope.$watch('player.isDead()', function (isDead) {
                if (!isDead) {
                    return;
                }
                if ($scope.score > $scope.highScore) {
                    $scope.highScore = $scope.score;
                    localStorage['kube3d.highScore'] = $scope.highScore;
                }
            });
            $scope.resetScore = function () {
                $scope.score = 0;
                Core.$apply($scope);
            };
            var sky = undefined;
            var el = $element.find('.kube3d-control')[0];
            var game = createGame({
                lightsDisabled: true,
                fogDisabled: false,
                statsDisabled: true,
                generateChunks: false,
                texturePath: 'resources/textures/',
                materials: [['grass', 'dirt', 'grass_dirt'], 'dirt', 'brick', 'Building1', 'Building2', 'Sidewalk', 'Window'],
                materialFlatColor: false,
                container: el
            }, function (game, avatar) {
                var target = game.controls.target();
                var player = $scope.player = new Kube3d.Player(game, avatar, target, $scope);
                entities[player.getName()] = player;
                sky = createSky({
                    game: game,
                    time: 800,
                    speed: 0.1,
                    color: new game.THREE.Color(game.skyColor)
                });
                var keyDown = function (ev) {
                    if (ev.keyCode === 'R'.charCodeAt(0))
                        avatar.toggle();
                };
                window.addEventListener('keydown', keyDown);
                function cleanup() {
                    window.removeEventListener('keydown', keyDown);
                    $('#stats').remove();
                    if (game) {
                        game.destroy();
                        delete game;
                    }
                    if (sky) {
                        delete sky;
                    }
                    if (currentTrack) {
                        currentTrack.stop();
                    }
                }
                $element.on('$destroy', function () {
                    $scope.$destroy();
                    setTimeout(function () {
                        cleanup();
                    }, 10);
                });
                var currentMaterial = 1;
                game.on('fire', function (origin, state) {
                    if (projectileCount() > maxProjectiles) {
                        return;
                    }
                    var name = origin.getName ? origin.getName() : player.getName();
                    var direction = origin.getName ? null : game.cameraVector();
                    if (!direction) {
                        var z = Math.cos(origin.rotation.y);
                        var x = Math.sin(origin.rotation.y);
                        var y = game.THREE.Math.degToRad(10);
                        direction = [x, y, z];
                    }
                    var bolt = new Kube3d.EnergyBolt(game, origin, direction, name);
                    entities[bolt.getName()] = bolt;
                    if (!origin.getName) {
                        Kube3d.playerLaser.play();
                    }
                    else {
                        Kube3d.playSound(Kube3d.podlekLaser, target, origin);
                    }
                });
                game.on('tick', function (delta) {
                    if ($scope.locked && !game.paused) {
                        Kube3d.log.debug("Game: ", game);
                        $scope.locked = false;
                        Core.$apply($scope);
                    }
                    if (Kube3d.settings.music) {
                        if (currentTrack !== undefined && player.isDead()) {
                            currentTrack.stop();
                            currentTrack = undefined;
                        }
                        if (currentTrack === undefined && !player.isDead()) {
                            currentTrack = Kube3d.tracks[_.random(Kube3d.tracks.length - 1)];
                            currentTrack.on('end', function () {
                                currentTrack = undefined;
                            });
                            currentTrack.play();
                        }
                    }
                    if (sky) {
                        sky()(delta);
                    }
                    _.forIn(model.podsByKey, function (pod, key) {
                        var creature = entities[key];
                        if (!creature) {
                            creature = entities[key] = new Kube3d.Podlek(model, game, key, pod, $scope);
                        }
                    });
                    var entitiesToRemove = [];
                    _.forIn(entities, function (entity, key) {
                        if (entity.needsSpawning()) {
                            Kube3d.log.debug("need to create entity ", key);
                            entity.spawn(target);
                        }
                        else {
                            if (entity.shouldDie()) {
                                entity.die(false);
                            }
                            entity.tick(delta);
                            entity.checkCollisions(entities);
                            if (entity.isDestroyed()) {
                                entitiesToRemove.push(entity.getName());
                            }
                        }
                    });
                    _.forEach(entitiesToRemove, function (key) {
                        var creature = entities[key];
                        if (!creature) {
                            return;
                        }
                        delete entities[key];
                    });
                });
            });
            game.voxels.on('missingChunk', function (p) {
                var voxels = generateChunk(p, chunkSize);
                var chunk = {
                    position: p,
                    dims: [chunkSize, chunkSize, chunkSize],
                    voxels: voxels
                };
                game.showChunk(chunk);
            });
            function updatePods(e, model) {
                Kube3d.log.debug("model updated: ", model);
                _.forIn(model.podsByKey, function (pod, key) {
                    var creature = entities[key];
                    if (!creature) {
                        creature = entities[key] = new Kube3d.Podlek(model, game, key, pod, $scope);
                    }
                    else {
                        creature.pod = pod;
                    }
                });
                Kube3d.log.debug("Creatures:", entities);
            }
            $scope.$on('kubernetesModelUpdated', updatePods);
        }]);
})(Kube3d || (Kube3d = {}));


angular.module("hawtio-kube3d-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/kube3d/html/preferences.html","<div ng-controller=\"Kube3d.Preferences\">\r\n  <div hawtio-form-2=\"config\" entity=\"entity\"></div>\r\n</div>\r\n");
$templateCache.put("plugins/kube3d/html/view.html","<div class=\"kube3d-viewport\" ng-controller=\"Kube3d.VoxelController\">\n  <div hawtio-breadcrumbs></div>\n  <div hawtio-tabs></div>\n  <div class=\"kube3d-control\"></div>\n  <div class=\"player-score\" ng-hide=\"player.isDead()\">\n    Score: {{score}}\n  </div>\n  <div class=\"angry-pods-overlay angry-pods-spawn\" ng-show=\"player.isSpawning()\">\n\n  </div>\n  <div class=\"angry-pods-overlay angry-pods-death\" ng-show=\"player.isDead()\" ng-click=\"player.respawn()\">\n    <div class=\"kube3d-instructions-wrapper\">\n      <p class=\"death-title\">You died!  Click to respawn...</p>\n      <p class=\"death-info\">Deaths: {{playerDeaths}}</p>\n      <p class=\"death-info\">Pods Destroyed: {{score}}</p>\n      <p class=\"death-info\" ng-show=\"highScore != score\">High Score: {{highScore}}</p>\n      <p class=\"death-info\" ng-show=\"highScore == score\">New high score!</p>\n    </div>\n  </div>\n  <div class=\"angry-pods-overlay angry-pods-title no-click\" ng-show=\"locked\">\n    <div class=\"kube3d-instructions-wrapper no-click\">\n      <span class=\"kube3d-start-title\">Click to play</span>\n    </div>\n  </div>\n</div>\n");}]); hawtioPluginLoader.addModule("hawtio-kube3d-templates");
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
